What happens when you initialize a repository? Why do you need to do it?

A new repository is created for the user. The user needs to keep a track of all the changes made to file/file(s) so that they can 
revert back to an older version if the newer version is not working upto the mark. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area acts as a buffer. It is a place where the files can be temporarily moved before being committed. 
It allows the user to to place multiple files in one place before committing all of it as a single commit.


How can you use the staging area to make sure you have one commit per logical change?

By adding as many files to the staging area (in one go) as you think will bring about a single logical change which 
is optimal for a single commit. 


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are a big help when the user is trying to add an experimental change to the existing code. It allows the user to work on it 
without having to worry about the existing code. 
For ex, if you want to make your app available in a new language, you can add a branch to the existing code and work on the new language feature. 


How do the diagrams help you visualize the branch structure?

Diagrams are self-explanatory. They show you all the branches along with all the commits. Hence, it helps visualise the branch 
structure in an easy and efficient manner. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It has all the commits from both the existing branches fused into one single branch. 
It's done the way it is (in the diagram) in order to make it more readable and understable for a user. 


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?


